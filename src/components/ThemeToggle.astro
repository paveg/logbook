---
// ThemeToggle component for dark/light mode switching
---

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="テーマを切り替え"
  title="テーマを切り替え"
>
  <svg
    class="sun-icon"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg
    class="moon-icon"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    background: none;
    border: none;
    color: var(--color-text-light);
    cursor: pointer;
    padding: var(--space-xs);
    border-radius: var(--border-radius-sm);
    transition: all 0.2s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: auto;
    height: auto;
    font-size: var(--font-size-sm);
    line-height: 1;
  }

  .theme-toggle:hover {
    color: var(--color-text);
    background: var(--color-bg-alt);
  }

  .theme-toggle:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition: all 0.2s ease;
  }

  /* Default state - show sun (for light mode) */
  .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.8);
  }

  /* Dark mode state - show moon */
  [data-theme='dark'] .sun-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.8);
  }

  [data-theme='dark'] .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
</style>

<script>
  // Theme management
  const THEME_KEY = 'theme-preference';

  // Get theme preference
  function getThemePreference() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem(THEME_KEY)) {
      return localStorage.getItem(THEME_KEY);
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  // Set theme
  function setTheme(theme) {
    if (theme === 'light') {
      document.documentElement.setAttribute('data-theme', 'light');
    } else {
      document.documentElement.setAttribute('data-theme', 'dark');
    }

    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(THEME_KEY, theme);
    }
  }

  // Toggle theme
  function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
  }

  // Initialize theme on page load
  function initializeTheme() {
    const theme = getThemePreference();
    setTheme(theme);

    // Add click event listener
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTheme);
  } else {
    initializeTheme();
  }

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem(THEME_KEY)) {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });
</script>
